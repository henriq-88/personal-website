// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Project {
    id         String   @id @default(cuid())
    banner     String   @db.Text
    body       String   @db.Text
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
    date       DateTime
    medias     Media[]
    name       String
    tags       Tag[]
    logo       String?  @db.Text
    website    String?  @db.Text

    @@index([categoryId])
}

model Tag {
    id       String    @id @default(cuid())
    name     String
    projects Project[]
}

model Category {
    id      String    @id @default(cuid())
    name    String
    Project Project[]
}

model Media {
    id        String    @id @default(cuid())
    type      MediaType
    url       String    @db.Text
    Project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String

    @@index([projectId])
}

enum MediaType {
    IMAGE
    VIDEO
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
